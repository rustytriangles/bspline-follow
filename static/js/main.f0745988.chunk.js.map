{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","mouse_loc","pts","counter","e","mx","clientX","my","clientY","this","setState","prevState","pt","a","concat","length","slice","box","cpts","i","t","idx","Math","floor","push","curve","nurbs","points","degree","boundary","evaluate","path_data","toString","class","timeout","callback","timer_callback","bind","enabled","repeat","xmlns","width","height","viewBox","onMouseMove","onmousemove","tabIndex","cx","cy","r","d","stroke","fill","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gQAkGeA,E,kDA7FX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,UAAW,EAAE,GAAI,GACjBC,IAAK,EAAE,GAAG,GACVC,QAAS,GALE,E,wDASPC,GACR,IAAMC,EAAKD,EAAEE,QAAU,GACjBC,EAAKH,EAAEI,QACbC,KAAKC,UAAS,SAACC,GACX,MAAO,CACHV,UAAW,CAACI,EAAIE,GAChBL,IAAKS,EAAUT,IACfC,QAASQ,EAAUR,c,qCAKhBC,GACXK,KAAKC,UAAS,SAACC,GACX,IAAMC,EAAKD,EAAUV,UACjBY,EAAIF,EAAUT,IAAIY,OAAO,CAACF,IAI9B,OAHIC,EAAEE,OAAS,KACXF,EAAIA,EAAEG,MAAMH,EAAEE,OAAS,KAEpB,CACHd,UAAWU,EAAUV,UACrBC,IAAKW,EACLV,QAASQ,EAAUR,QAAU,Q,+BAarC,IAPA,IAEMc,EAAM,CAAC,EAAG,EAFN,IACA,KAKNC,EAAO,GACFC,EAAE,EAAGA,EAFG,EAESA,IAAK,CAC3B,IAAMC,EAAID,EAAC,EACLE,EAAMC,KAAKC,MAAMH,GAAKX,KAAKT,MAAME,IAAIa,OAAO,IAClDG,EAAKM,KAAK,CAACf,KAAKT,MAAME,IAAImB,GAAK,GAAIZ,KAAKT,MAAME,IAAImB,GAAK,KAW3D,IARA,IAAMI,EAAQC,IAAM,CAChBC,OAAQT,EACRU,OAAQ,EACRC,SAAU,YAGV3B,EAAM,GAEDiB,EAAE,EAAGA,EADI,GACSA,IAAK,CAC5B,IAAMC,EAAI,EAAI,EAAeD,EAAf,GACdjB,EAAIsB,KAAKC,EAAMK,SAAS,GAAGV,IAI/B,IADA,IAAIW,EAAY,KAAO7B,EAAI,GAAG,GAAG8B,WAAa,IAAM9B,EAAI,GAAG,GAAG8B,WACrDb,EAAE,EAAGA,EAAEjB,EAAIa,OAAQI,IACxBY,GAAa,MAAQ7B,EAAIiB,GAAG,GAAGa,WAAa,IAAM9B,EAAIiB,GAAG,GAAGa,WAGhE,OACI,sBAAKC,MAAM,UAAX,UACI,cAAC,IAAD,CAAeC,QAAS,GAAIC,SAAU1B,KAAK2B,eAAeC,KAAK5B,MAAO6B,QAAQ,OAAOC,OAAO,SAC5F,qBAAKC,MAAM,6BACNC,MAnCH,IAoCGC,OAnCH,IAoCGC,QAAS1B,EACT2B,YAAcnC,KAAKoC,YAAYR,KAAK5B,MACpCqC,SAAS,IALd,SAOI,8BACI,wBAAQC,GAAItB,EAAME,OAAO,GAAG,GAAIqB,GAAIvB,EAAME,OAAO,GAAG,GAAIsB,EAvC9D,IAwCM,wBAAQF,GAAItB,EAAME,OAAO,GAAG,GAAIqB,GAAIvB,EAAME,OAAO,GAAG,GAAIsB,EAxC9D,IAyCM,wBAAQF,GAAItB,EAAME,OAAO,GAAG,GAAIqB,GAAIvB,EAAME,OAAO,GAAG,GAAIsB,EAzC9D,IA0CM,wBAAQF,GAAItB,EAAME,OAAO,GAAG,GAAIqB,GAAIvB,EAAME,OAAO,GAAG,GAAIsB,EA1C9D,IA2CM,wBAAQF,GAAItB,EAAME,OAAO,GAAG,GAAIqB,GAAIvB,EAAME,OAAO,GAAG,GAAIsB,EA3C9D,IA4CM,wBAAQF,GAAItB,EAAME,OAAO,GAAG,GAAIqB,GAAIvB,EAAME,OAAO,GAAG,GAAIsB,EA5C9D,IA6CM,sBAAMC,EAAGnB,EAAWoB,OAAO,MAAMC,KAAK,qB,GAtF5CC,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f0745988.chunk.js","sourcesContent":["import React from 'react';\nimport nurbs from 'nurbs';\nimport IntervalTimer from 'react-interval-timer';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mouse_loc: [-1, -1],\n            pts: [-1,-1],\n            counter: 0\n        };\n    }\n\n    onmousemove(e) {\n        const mx = e.clientX - 15;\n        const my = e.clientY;\n        this.setState((prevState) => {\n            return {\n                mouse_loc: [mx, my],\n                pts: prevState.pts,\n                counter: prevState.counter\n            }\n        });\n    }\n\n    timer_callback(e) {\n        this.setState((prevState) => {\n            const pt = prevState.mouse_loc;\n            let a = prevState.pts.concat([pt]);\n            if (a.length > 25) {\n                a = a.slice(a.length - 25);\n            }\n            return {\n                mouse_loc: prevState.mouse_loc,\n                pts: a,\n                counter: prevState.counter + 1\n            }\n        });\n    }\n\n    render() {\n        const w = 1000;\n        const h = 960;\n        const box = [0, 0, w, h];\n        const r = 5;\n\n        const num_cpts = 6;\n        let cpts = [];\n        for (let i=0; i<num_cpts; i++) {\n            const t = i / (num_cpts-1);\n            const idx = Math.floor(t * (this.state.pts.length-1));\n            cpts.push([this.state.pts[idx][0], this.state.pts[idx][1]]);\n        }\n\n        const curve = nurbs({\n            points: cpts,\n            degree: 2,\n            boundary: 'clamped'\n        });\n\n        let pts = [];\n        const num_steps = 35;\n        for (let i=0; i<num_steps; i++) {\n            const t = 2 + (num_cpts-2) * i / (num_steps-1);\n            pts.push(curve.evaluate([],t));\n        }\n\n        let path_data = \"M \" + pts[0][0].toString() + \",\" + pts[0][1].toString();\n        for (let i=1; i<pts.length; i++) {\n            path_data += \" L \" + pts[i][0].toString() + \",\" + pts[i][1].toString();\n        }\n\n        return (\n            <div class=\"wrapper\">\n                <IntervalTimer timeout={12} callback={this.timer_callback.bind(this)} enabled='true' repeat='true' />\n                <svg xmlns=\"http://www.w3.org/2000/svg\"\n                     width={w}\n                     height={h}\n                     viewBox={box}\n                     onMouseMove={ this.onmousemove.bind(this)}\n                     tabIndex=\"1\"\n                >\n                    <g>\n                        <circle cx={curve.points[0][0]} cy={curve.points[0][1]} r={r}/>\n                        <circle cx={curve.points[1][0]} cy={curve.points[1][1]} r={r}/>\n                        <circle cx={curve.points[2][0]} cy={curve.points[2][1]} r={r}/>\n                        <circle cx={curve.points[3][0]} cy={curve.points[3][1]} r={r}/>\n                        <circle cx={curve.points[4][0]} cy={curve.points[4][1]} r={r}/>\n                        <circle cx={curve.points[5][0]} cy={curve.points[5][1]} r={r}/>\n                        <path d={path_data} stroke=\"red\" fill=\"none\"/>\n                    </g>\n                </svg>\n                </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}